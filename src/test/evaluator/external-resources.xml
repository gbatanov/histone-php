<?xml version="1.0" encoding="UTF-8"?>
<suites>

    <!-- resourceResolver type:
            default - means default built-in resource resolver should be used (for java and php file protocol will be used, for javascript - http protocol
            custom  - special custom resolver will be used. all resource loading is his own responsibility
    -->
    <!-- :baseURI - if this token is present somewhere, then it should be overriden with baseURI value before passing to histone tests
         baseURI should point to folder where acceptance-test-cases jar is unpacked. -->
    <!-- :args: -  if several args were passed print them all joined with '-' symbol and with '[' in the beginning and ']' at the end -->
    <!-- :exception: - text in function body means that this function should throw exception -->

    <suite name="loadJSON">
        <case>
            <!-- check if it works -->
            <resourceResolver type="default"/>
            <input>a {{loadJSON(':baseURI:testresources/json/test_for_json.json')['key']}} b {{loadJSON(':baseURI:testresources/json/test_for_json.json').isMap()}} c</input>
            <expected>a 123 b true c</expected>
        </case>

        <case>
            <!-- check if it works when resource loader can't find file -->
            <resourceResolver type="default"/>
            <input>a {{loadJSON(':baseURI:/unknown.json').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>

        <case>
            <!-- check if loadJSON result will be of undefined type in case resource resolver can't find protocol for resource -->
            <resourceResolver type="default"/>
            <input>a {{loadJSON('dummy:/file.json').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>

        <case>
            <!-- check if it works for arrays -->
            <resourceResolver type="default"/>
            <input>a {{loadJSON(':baseURI:testresources/json/test_for_json_array.json')}} b {{loadJSON(':baseURI:testresources/json/test_for_json_array.json').isMap()}} c</input>
            <expected>a 1 2 3 b true c</expected>
        </case>

        <case>
            <!-- check if it works for strings -->
            <resourceResolver type="default"/>
            <input>a {{loadJSON(':baseURI:testresources/json/test_for_json_string.json')}} b {{loadJSON(':baseURI:testresources/json/test_for_json_string.json').isString()}} c</input>
            <expected>a test string b true c</expected>
        </case>

        <case>
            <!-- check if loadJSON result will be of undefined type in case resource is not valid JSON file -->
            <resourceResolver type="default"/>
            <input>a {{loadJSON(':baseURI:testresources/json/test_for_json_invalid.json').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>
    </suite>

    <suite name="loadText">
        <case>
            <!-- check if it works -->
            <input>a {{loadText(':baseURI:testresources/txt/file.txt')}} b</input>
            <expected>a text file content b</expected>
        </case>

        <case>
            <!-- check if it works when resource loader can't find resource protocol -->
            <resourceResolver type="default"/>
            <input>a {{loadText('dummy:/file.txt').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>

        <case>
            <!-- check if it works when resource loader can't find resoruce -->
            <resourceResolver type="default"/>
            <input>a {{loadText(':baseURI:testresources/unknown.txt').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>

        <case>
            <!-- check loadText doesn't do any parsing to resource -->
            <resourceResolver type="default"/>
            <input>a {{loadText(':baseURI:testresources/txt/file_with_markup.txt')}} b</input>
            <expected>a text file {{'test'}} content b</expected>
        </case>
    </suite>

    <suite name="import">
        <case>
            <!-- check if it works -->
            <resourceResolver type="default"/>
            <input>a {{import ':baseURI:testresources/tpl/test_for_import.tpl'}} b {{x}} c {{macro_name()}} d</input>
            <expected>a  b 10 c inner macro output d</expected>
        </case>

        <case>
            <!-- check if result will be of undefined type in case resource resolver can't find such protocol -->
            <resourceResolver type="default"/>
            <input>a {{import 'other::baseURI:testresources/tpl/test_for_import.tpl'}} b</input>
            <expected>a  b</expected>
        </case>

        <case>
            <!-- check if result will be of undefined type in case resource resolver can't find such resource -->
            <resourceResolver type="default"/>
            <input>a {{import 'other::baseURI:testresources/tpl/unknown.tpl'}} b</input>
            <expected>a  b</expected>
        </case>

        <case>
            <!-- check if import overwrites local variable -->
            <resourceResolver type="default"/>
            <input>a {{var x = 30}} b {{x}} c {{import ':baseURI:testresources/tpl/test_for_import.tpl'}} d {{x}} e {{macro_name()}} f</input>
            <expected>a  b 30 c  d 10 e inner macro output f</expected>
        </case>

        <case>
            <!-- check if import overwrites local macro -->
            <resourceResolver type="default"/>
            <input>a {{macro macro_name}}local macro{{/macro}} b {{macro_name()}} c {{import ':baseURI:testresources/tpl/test_for_import.tpl'}} d {{macro_name()}} e</input>
            <expected>a  b local macro c  d inner macro output e</expected>
        </case>

        <case>
            <!-- check if import will return undefined in case resource is not valid Histone file -->
            <resourceResolver type="default"/>
            <input>a {{import 'dummy:/file.tpl'}} b</input>
            <expected>a  b</expected>
        </case>

        <case>
            <!-- check recursive import -->
            <resourceResolver type="default"/>
            <input>a {{import ':baseURI:testresources/tpl/test_for_import_recursive_1.tpl'}} b {{macro1()}} c {{macro2()}} d</input>
            <expected>a  b macro1 output c macro2 output d</expected>
        </case>

    </suite>

    <suite name="include">
        <case>
            <!-- check if it works -->
            <resourceResolver type="default"/>
            <input>a {{include(':baseURI:testresources/tpl/test_for_include.tpl')}} b</input>
            <expected>a include file contents b</expected>
        </case>

        <case>
            <!-- check if include will return undefined in case there resource resolver can't find such protocol -->
            <resourceResolver type="default"/>
            <input>a {{include('other::baseURI:testresources/tpl/test_for_include.tpl').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>

        <case>
            <!-- check if include will return undefined in case there resource resolver can't find such protocol -->
            <resourceResolver type="default"/>
            <input>a {{include(':baseURI:testresources/tpl/unknown.tpl').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>

        <case>
            <!-- check if include doesn't overwrites local variable -->
            <resourceResolver type="default"/>
            <input>a {{var x = 30}} b {{x}} c {{include(':baseURI:testresources/tpl/test_for_include.tpl')}} d {{x}} e</input>
            <expected>a  b 30 c include file contents d 30 e</expected>
        </case>

        <case>
            <!-- check if include doesn't overwrites local macro -->
            <resourceResolver type="default"/>
            <input>a {{macro macro_name}}local macro{{/macro}} b {{macro_name()}} c {{include(':baseURI:testresources/tpl/test_for_include.tpl')}} d {{macro_name()}} e</input>
            <expected>a  b local macro c include file contents d local macro e</expected>
        </case>

        <case>
            <!-- check if include doesn't injects it's macro to current context -->
            <resourceResolver type="default"/>
            <input>a {{include(':baseURI:testresources/tpl/test_for_include.tpl')}} b {{macro_name().isUndefined()}} c</input>
            <expected>a include file contents b true c</expected>
        </case>

        <case>
            <!-- check if include will return undefined in case resource is not valid Histone file -->
            <resourceResolver type="default"/>
            <input>a {{include(':baseURI:testresources/tpl/test_for_include_invalid.tpl').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>
    </suite>

    <suite name="relative URIs">
        <case>
            <!-- Simple case with simple baseURI -->
            <resourceResolver type="default"/>
            <global name="baseURI" value=":baseURI:"/>
            <input>a {{loadText('testresources/txt/file.txt')}} b</input>
            <expected>a text file content b</expected>
        </case>

        <case>
            <!-- Simple case with simple baseURI -->
            <resourceResolver type="default"/>
            <global name="baseURI" value=":baseURI:"/>
            <input>a {{loadJSON('testresources/json/test_for_json.json')['key']}} b {{loadJSON('testresources/json/test_for_json.json').isMap()}} c</input>
            <expected>a 123 b true c</expected>
        </case>

        <case>
            <!-- Simple case with simple baseURI -->
            <resourceResolver type="default"/>
            <global name="baseURI" value=":baseURI:"/>
            <input>a {{global.baseURI}} b {{include('testresources/tpl/test_for_include_relative.tpl')}} c {{global.baseURI}} d</input>
            <expected>a :baseURI: b relative file :baseURI:testresources/tpl/test_for_include_relative.tpl content c :baseURI: d</expected>
        </case>

        <case>
            <!-- Simple case with simple baseURI -->
            <resourceResolver type="default"/>
            <global name="baseURI" value=":baseURI:"/>
            <input>a {{include('testresources/tpl/unknown.tpl').isUndefined()}} b</input>
            <expected>a true b</expected>
        </case>

        <case>
            <resourceResolver type="default"/>
            <global name="baseURI" value=":baseURI:"/>
            <input>a {{global.baseURI}} b {{include('testresources/tpl/test_for_include_subfolder.tpl')}} c {{global.baseURI}} d</input>
            <expected>a :baseURI: b ZA:baseURI:testresources/tpl/subfolder/file_for_include.tplBX c :baseURI: d</expected>
        </case>

        <case>
            <!-- check if it works -->
            <resourceResolver type="default"/>
            <global name="baseURI" value=":baseURI:"/>
            <input>a {{import 'testresources/tpl/test_for_import.tpl'}} b {{x}} c {{macro_name()}} d</input>
            <expected>a  b 10 c inner macro output d</expected>
        </case>

        <case>
            <!-- check nested import -->
            <resourceResolver type="default"/>
            <global name="baseURI" value=":baseURI:"/>
            <input>a {{global.baseURI}} b {{import ':baseURI:testresources/tpl/test_for_import_subfolder.tpl'}} c {{macro1()}} d {{macro2()}} e {{global.baseURI}} f</input>
            <expected>a :baseURI: b  c macro1 :baseURI:testresources/tpl/test_for_import_subfolder.tpl output d macro2 :baseURI:testresources/tpl/subfolder/file_for_import.tpl output e :baseURI: f</expected>
        </case>


    </suite>
</suites>